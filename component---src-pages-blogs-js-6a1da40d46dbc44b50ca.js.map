{"version":3,"sources":["webpack:///./src/hooks/useFilterQuery.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/Blog/BlogLayout.js","webpack:///./src/pages/blogs.js","webpack:///./src/components/common/SplitLayout.js"],"names":["useFilterQuery","query","setQuery","useState","URLSearchParams","window","location","search","get","activeTags","setActiveTags","Set","useEffect","globalHistory","listen","_ref","action","nquery","tags","split","_toConsumableArray","toggleTag","tag","Array","from","has","filter","x","push","join","length","navigate","encodeURIComponent","TagBreadcrumb","styled","div","withConfig","displayName","componentId","p","theme","dark","primaryColor","isActive","css","Tags","useStaticQuery","React","createElement","style","overflow","allMarkdownRemark","group","map","key","fieldValue","onClick","aria-label","totalCount","BlogWrapper","article","accentColor","shadowSmall","secondaryColor","BlogDateAndReadTime","date","readtime","FontAwesomeIcon","color","icon","BlogCard","_ref2","title","excerpt","slug","Link","to","marginTop","idx","BlogLayout","children","sideContent","SplitLayout","content","aside","Fragment","BlogsPage","_blogPostsQuery$allMa3","blogPosts","setBlogPosts","blogPostsQuery","size","_blogPostsQuery$allMa","blogs","edges","node","keep","frontmatter","forEach","_blogPostsQuery$allMa2","Layout","SEO","id","fields","timeToRead","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","className"],"mappings":"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","file":"component---src-pages-blogs-js-6a1da40d46dbc44b50ca.js","sourcesContent":["import { navigate } from 'gatsby';\nimport { useEffect, useState } from 'react';\nimport { globalHistory } from '@reach/router';\n\nconst useFilterQuery = () => {\n    const [query, setQuery] = useState(new URLSearchParams(typeof window != 'undefined' && location.search).get('q'));\n    const [activeTags, setActiveTags] = useState(new Set());\n\n    // listen for url change: https://stackoverflow.com/a/61664193/11922517\n    useEffect(() => {\n        return globalHistory.listen(({ action }) => {\n            if (action === 'PUSH') {\n                const nquery = new URLSearchParams(typeof window != 'undefined' && location.search).get('q');\n                setQuery(nquery);\n                let tags = [];\n                if (nquery) tags = nquery.split(',');\n                setActiveTags(new Set([...tags]));\n            }\n        });\n    }, [query]);\n\n    useEffect(() => {\n        if (!query) return;\n\n        const tags = query.split(',');\n        setActiveTags(new Set([...tags]));\n    }, [query]);\n\n    const toggleTag = tag => {\n        let tags = Array.from(activeTags);\n\n        if (activeTags.has(tag)) tags = tags.filter(x => x !== tag);\n        else tags.push(tag);\n\n        const nquery = tags.join(',');\n        setQuery(nquery);\n        setActiveTags(new Set([...tags]));\n\n        // change query string in URL\n        if (tags.length !== 0) {\n            navigate(`/blogs?q=${encodeURIComponent(nquery)}`);\n        } else {\n            navigate('/blogs');\n        }\n    };\n\n    return { query, activeTags, toggleTag };\n};\n\nexport default useFilterQuery;\n","import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport styled, { css } from 'styled-components';\nimport useFilterQuery from '../../hooks/useFilterQuery';\n\nexport const TagBreadcrumb = styled.div`\n    float: left;\n    padding: 8px 13px;\n    border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n    border-radius: 50px;\n    line-height: 10px;\n\n    margin: 5px 5px 5px 0;\n    font-size: 13px;\n\n    ${p =>\n        p.isActive\n            ? css`\n                  background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n                  color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\n              `\n            : css`\n                  background-color: unset;\n                  color: unset;\n              `}\n\n    &:hover {\n        cursor: pointer;\n        background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n        color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\n    }\n`;\n\nexport const useTags = () => {\n    // **use this in filter to hide blogs** frontmatter: { hide: { ne: true } }\n\n    const tags = useStaticQuery(graphql`\n        query {\n            allMarkdownRemark(limit: 2000, filter: { fields: { posttype: { eq: \"blogs\" } } }) {\n                group(field: frontmatter___tags) {\n                    fieldValue\n                    totalCount\n                }\n            }\n        }\n    `);\n\n    return tags;\n};\n\nconst Tags = () => {\n    const tags = useTags();\n    const { activeTags, toggleTag } = useFilterQuery();\n\n    return (\n        <section style={{ overflow: 'auto' }}>\n            {tags.allMarkdownRemark.group.map(tag => (\n                <TagBreadcrumb\n                    key={tag.fieldValue}\n                    onClick={() => toggleTag(tag.fieldValue)}\n                    isActive={activeTags.has(tag.fieldValue)}\n                    aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n                >\n                    {tag.fieldValue}, {tag.totalCount}\n                </TagBreadcrumb>\n            ))}\n        </section>\n    );\n};\n\nexport default Tags;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { TagBreadcrumb } from './Tags';\nimport useFilterQuery from '../../hooks/useFilterQuery';\n\nconst BlogWrapper = styled.article`\n    overflow: auto;\n    margin-bottom: 70px;\n    /* margin-top: 100px; */\n    padding: 30px 30px;\n    border-top: 5px solid ${p => (p.theme.dark ? p.theme.accentColor : p.theme.primaryColor)};\n    border-radius: 10px;\n    box-shadow: ${p => p.theme.shadowSmall};\n    background-color: ${p => p.theme.secondaryColor};\n\n    &:hover {\n        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n    }\n\n    span {\n        font-size: 13px;\n        color: gray;\n    }\n`;\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n    <span>\n        <span aria-label={`publish date ${date}`}>\n            <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n            &nbsp;&nbsp;{date}\n        </span>\n        &nbsp;&nbsp;&nbsp;\n        <span aria-label={`${readtime} minutes read`}>\n            <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\n            &nbsp;&nbsp;{readtime} min read\n        </span>\n    </span>\n);\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n    const { activeTags, toggleTag } = useFilterQuery();\n\n    return (\n        <BlogWrapper>\n            <BlogDateAndReadTime date={date} readtime={readtime} />\n            <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n                <h2>{title}</h2>\n                <p>{excerpt}</p>\n            </Link>\n            <div style={{ marginTop: 20 }}>\n                {tags.map((tag, idx) => (\n                    <TagBreadcrumb\n                        key={idx}\n                        aria-label={`${tag} tag`}\n                        onClick={() => toggleTag(tag)}\n                        isActive={activeTags.has(tag)}\n                    >\n                        {tag}\n                    </TagBreadcrumb>\n                ))}\n            </div>\n        </BlogWrapper>\n    );\n};\n\nBlogDateAndReadTime.propTypes = {\n    date: PropTypes.string.isRequired,\n    readtime: PropTypes.number.isRequired,\n};\n\nBlogCard.propTypes = {\n    date: PropTypes.string.isRequired,\n    readtime: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    excerpt: PropTypes.string.isRequired,\n    slug: PropTypes.string.isRequired,\n    tags: PropTypes.array.isRequired,\n};\n\nexport default BlogCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SplitLayout from '../common/SplitLayout';\nimport Tags from './Tags';\n\nconst BlogLayout = ({ children, sideContent }) => {\n    return (\n        <SplitLayout\n            content={children}\n            aside={\n                <>\n                    <section>\n                        <h4>Tags</h4>\n                        <Tags />\n                        <br />\n                    </section>\n                    {sideContent && sideContent}\n                </>\n            }\n        />\n    );\n};\nBlogLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default BlogLayout;\n","import React, { useEffect, useState } from 'react';\nimport Layout from '../Layout/Layout';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport BlogCard from '../components/Blog/BlogCard';\nimport SEO from '../components/SEO/SEO';\nimport BlogLayout from '../components/Blog/BlogLayout';\nimport useFilterQuery from '../hooks/useFilterQuery';\n\nconst BlogsPage = () => {\n    const { activeTags } = useFilterQuery();\n    const [blogPosts, setBlogPosts] = useState([]);\n    const blogPostsQuery = useStaticQuery(\n        graphql`\n            query {\n                allMarkdownRemark(\n                    filter: { fields: { posttype: { eq: \"blogs\" } } }\n                    sort: { fields: frontmatter___date, order: DESC }\n                ) {\n                    edges {\n                        node {\n                            id\n                            excerpt\n                            timeToRead\n                            frontmatter {\n                                title\n                                date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n                                tags\n                            }\n                            fields {\n                                slug\n                            }\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    useEffect(() => {\n        if (activeTags.size !== 0) {\n            const blogs = blogPostsQuery?.allMarkdownRemark?.edges.filter(({ node }) => {\n                let keep = false;\n                const tags = node.frontmatter.tags;\n                tags.forEach(tag => (keep |= activeTags.has(tag)));\n                return keep;\n            });\n            setBlogPosts(blogs);\n        } else {\n            const blogs = blogPostsQuery?.allMarkdownRemark?.edges;\n            setBlogPosts(blogs);\n        }\n    }, [activeTags, blogPostsQuery?.allMarkdownRemark?.edges]);\n\n    return (\n        <Layout>\n            <SEO title=\"Blogs | Rohit Bakoliya\" />\n\n            <BlogLayout>\n                {blogPosts?.map(({ node }) => (\n                    <BlogCard\n                        key={node.id}\n                        slug={node.fields.slug}\n                        title={node.frontmatter.title}\n                        date={node.frontmatter.date}\n                        tags={node.frontmatter.tags}\n                        readtime={node.timeToRead}\n                        excerpt={node.excerpt}\n                    />\n                ))}\n            </BlogLayout>\n        </Layout>\n    );\n};\n\nexport default BlogsPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n    ${p => p.theme.spacing.sectionBottom};\n\n    & article:first-of-type {\n        margin-top: 15px;\n    }\n\n    display: grid;\n    grid-template-columns: minmax(750px, 1fr) 1fr;\n    grid-column-gap: 30px;\n    grid-template-areas: 'post side';\n\n    .layout__content {\n        grid-area: post;\n    }\n    .layout__aside {\n        grid-area: side;\n    }\n\n    @media ${props => props.theme.media.fablet} {\n        grid-template-columns: 1fr 1fr;\n        grid-column-gap: 0px;\n        grid-row-gap: 30px;\n        grid-template-areas:\n            'post post'\n            'side side';\n    }\n\n    .sticky__aside {\n        position: sticky;\n        top: 100px;\n    }\n`;\n\nconst SplitLayout = ({ content, aside }) => (\n    <SplitLayoutWrapper>\n        <section className=\"layout__content\">{content && content}</section>\n        <section className=\"layout__aside\">\n            <aside className=\"sticky__aside\">{aside && aside}</aside>\n        </section>\n    </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n    content: PropTypes.node.isRequired,\n    aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n"],"sourceRoot":""}